napkin
======

One of my favorite ways to get lost in an idea is back of the napkin
calculations as one would do in a bar.  I love back-of-the-envelope
calculations.

Take a seemingly crazy idea and bring it to fruition.  It's like raising a
child in an instant.

napkin is a tool for performing back-of-the-envelope calculations.  I
frequently found myself writing out the same calculations, having to remember
units, having to write from scratch the print lines.  What if I could just
write out the calculations and have them take form.  Have it be easy to see
where the calculation went based upon something readable.

I found myself often writing Python scripts to iterate an idea and test its
feasibility.  If I were thinking of building a replicated data store, I might
want to do something like this:

    #!/usr/bin/env python3

    REPLICATION_FACTOR = 3
    DATASET_SIZE = 1024**5 # one PiB
    DISK_SIZE = 16*1024**4 # 16 TiB

    DISKS_NEEDED = REPLICATION_FACTOR * DATASET_SIZE / DISK_SIZE
    print(DISKS_NEEDED)

This was usually enough to get the job done, but for larger brainstorming
sessions I'd find myself wanting to have some additional sugar:

    #!/usr/bin/env python3

    K = 1000
    M = 1000 * K
    G = 1000 * M

    Ki = 1024
    Mi = 1024 * Ki
    Gi = 1024 * Mi

    def humanize(x):
        if x > Gi: return '%1.2fGi' % (x / Gi)
        if x > Mi: return '%1.2fMi' % x
        if x > Ki: return '%1.2fKi' % x
        return '%1.2f' % x

    REPLICATION_FACTOR = 3
    DATASET_SIZE = 1024**5 # one PiB
    DISK_SIZE = 16 * 1024**4 # 16 TiB

    DISKS_NEEDED = REPLICATION_FACTOR * DATASET_SIZE / DISK_SIZE
    print(DISKS_NEEDED)

    PAGE_SIZE = 4096
    PAGES_PER_DISK = DISK_SIZE / PAGE_SIZE
    print(PAGES_PER_DISK)

    # So, how many pages would be inside a B+-tree with perfect fanout of 128
    # if we # devote half the pages on disk to leaves and keep the other half
    # for maintenance and the interior of the tree?
    import math
    BRANCHING_FACTOR = 128
    INTERIOR_PAGES = BRANCHING_FACTOR**math.floor(math.log(PAGES_PER_DISK/2, BRANCHING_FACTOR))
    print(INTERIOR_PAGES)
    # And how much space is that?
    print(humanize(INTERIOR_PAGES * PAGE_SIZE))

Here we're getting closer to something workable, but the clunkiness of this
approach is starting to become apparent.  If we were to run this script, we'd
see something like this:

    $ ./kvs.py
    192.0
    4294967296.0
    268435456
    1024.00Gi

Not very appealing to read.  Worse, we'd have to do quite a bit to tie the
values back to the values we're printing.  Of course, then we'd end up with
snippets that start to look like this:

    DISKS_NEEDED = REPLICATION_FACTOR * DATASET_SIZE / DISK_SIZE
    print('DISK_NEEDED =', DISKS_NEEDED)

Of course this is error prone and becomes boring because it's simply so
repetitive.  What started as a simple script quickly becomes more of a burden
than it is doing the heavy lifting.  And that doesn't even take into account
the lack of units on the numbers which makes it hard to really evaluate the
magnitude of what we're looking at.

What if, instead, we could get output like this?

    REPLICATION_FACTOR = 3
    DATASET_SIZE = 1PiB
    DISK_SIZE = 16TiB
    
    DISKS_NEEDED = 1.9e+02
    
    PAGE_SIZE = 4kiB
    PAGES_PER_DISK = 4.3e+09
    
    # So, how many pages would be inside a B+-tree with perfect fanout of 128
    # if we # devote half the pages on disk to leaves and keep the other half
    # for maintenance and the interior of the tree?
    BRANCHING_FACTOR = 1.3e+02
    INTERIOR_PAGES = 2.7e+08
    # And how much space is that?
    INTERIOR_SPACE = 1TiB

Here's the napkin input that gives the above for output:

    REPLICATION_FACTOR = 3
    DATASET_SIZE = 1024**5 # bytes
    DISK_SIZE = 16 * 1024**4 # bytes
    
    DISKS_NEEDED = REPLICATION_FACTOR * DATASET_SIZE / DISK_SIZE
    
    PAGE_SIZE = 4096 # bytes
    PAGES_PER_DISK = DISK_SIZE / PAGE_SIZE
    
    # So, how many pages would be inside a B+-tree with perfect fanout of 128
    # if we devote half the pages on disk to leaves and keep the other half
    # for maintenance and the interior of the tree?
    BRANCHING_FACTOR = 128
    INTERIOR_PAGES = BRANCHING_FACTOR**floor(log(PAGES_PER_DISK/2, BRANCHING_FACTOR))
    # And how much space is that?
    INTERIOR_SPACE = INTERIOR_PAGES * PAGE_SIZE # bytes
